.center{
    text-align:center;
}



#gameInfo{
    padding-bottom: 2%;
    padding-top: 2%;
    padding-left: 2%;
    padding-right: 1%;
    font-size: 20px;
/*
    border: dotted;
    font-family: "Century Gothic";
   border-color: red green blue yellow;
    text-align: right;
    
     border-radius: 25px;
*/
}


#userNotes{
    padding-bottom: 2%;
    padding-top: 2%;
    padding-left: 4.5%;
    /*border: dotted;*/
    font-family: "Century Gothic";
    /*background-color: lightgoldenrodyellow;*/
    text-align: center;
    font-size: xx-large;
    color: lightsalmon;


}

.answer_words
{
    width: 90%;
    padding-bottom: 8%;
    padding-top: 8%;
    font-size: xx-large;
    font-family: monospace;
    border-style: solid;
    border-color: black black black black;
    border-width: 7px;
    /*border-bottom-left-radius: 30px;*/
    /*border-bottom-right-radius: 30px;*/
    border-radius: 25px;
}

.video
{
    width : 100%;
    height: 60%;
    border-width: 15px;
    border-style: solid;
    border-color:  black black black black;
}

.nextQuesBtn{
    display: inline-block;
    margin: 0 10px 0 0;
    padding: 15px 45px;
    font-size: 48px;
    color: #3cfc89;
    font-family: "Bitter",serif;
    line-height: 1.8;
    border-radius:15px;
}

.gameOver{
    font-family: "Century Gothic";
    /*background-color: lightgoldenrodyellow;*/
    text-align: center;
    font-size: 1000%;
    color: lightsalmon;
    padding-bottom: 10%;
}

.green{
    color:green;
}

.red{
    color:red;
}


.instuctionStyle{
   
    text-align: right;
    font-size: 10px;
    font-family: fantasy;
    width: 90%;
    border-style: solid;
    border-color: black black black black;
    border-width: 7px;
    /*border-bottom-left-radius: 30px;*/
    /*border-bottom-right-radius: 30px;*/
    border-radius: 25px;
}

#fff{
    text-align: right;
}


.info{
     width: 90%;
    padding-bottom: 8%;
    padding-top: 8%;
    font-size: 20px;
    font-family: monospace;
    border-style: solid;
    border-color: black blue black blue;
    border-width: 7px;
    background-color:blue;
    /*border-bottom-left-radius: 30px;*/
    /*border-bottom-right-radius: 30px;*/
    border-radius: 25px;
    
}


.informationButton{
    border-style: solid;
    border-color: palevioletred palevioletred palevioletred palevioletred;
    border-width: 7px;
    background-color:blue;
    font-size: 20px;
    
}


// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
  // Then clear the floated columns
  .clearfix();

  @media (min-width: @screen-sm-min) {
    margin-left:  (@gutter / -2);
    margin-right: (@gutter / -2);
  }

  // Negative margin nested rows out to align the content of columns
  .row {
    margin-left:  (@gutter / -2);
    margin-right: (@gutter / -2);
  }
}

// Generate the extra small columns
.make-xs-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @grid-float-breakpoint) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the small columns
.make-sm-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the small column offsets
.make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the medium columns
.make-md-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the medium column offsets
.make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @grid-columns));
  }
}

// Generate the large columns
.make-lg-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  (@gutter / 2);
  padding-right: (@gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @grid-columns));
  }
}

// Generate the large column offsets
.make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @grid-columns));
  }
}
.make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @grid-columns));
  }
}








